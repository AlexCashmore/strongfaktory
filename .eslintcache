[{"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\index.js":"1","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\App.js":"2","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\reportWebVitals.js":"3","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\StrongFactory.tsx":"4","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\stores\\Stores.tsx":"5","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\stores\\generalStore.ts":"6","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\StrongSurvey.tsx":"7","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\daily.js":"8","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\chartwrapper.js":"9","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\Spinner.js":"10","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\search.js":"11","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\spinner.js":"12"},{"size":582,"mtime":1611116791751,"results":"13","hashOfConfig":"14"},{"size":472,"mtime":1611116827942,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":9985,"mtime":1611549488802,"results":"17","hashOfConfig":"14"},{"size":456,"mtime":1611209879610,"results":"18","hashOfConfig":"14"},{"size":922,"mtime":1611520711461,"results":"19","hashOfConfig":"14"},{"size":16368,"mtime":1611546146464,"results":"20","hashOfConfig":"14"},{"size":9673,"mtime":1611352200302,"results":"21","hashOfConfig":"14"},{"size":4286,"mtime":1611210659475,"results":"22","hashOfConfig":"14"},{"size":1547,"mtime":1611210400254,"results":"23","hashOfConfig":"14"},{"size":1388,"mtime":1611210516622,"results":"24","hashOfConfig":"14"},{"size":1547,"mtime":1611210400254,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"vbffxv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\index.js",[],["57","58"],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\App.js",["59","60"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport {inject, observer} from \"mobx-react\";\nimport ObservedStrongFactory from \"./components/StrongFactory\";\n\n@inject('rootStore')@observer class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n\n    return (\n        <div className=\"App\">\n          <ObservedStrongFactory rootStore={this.props.rootStore}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\reportWebVitals.js",[],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\StrongFactory.tsx",["61","62","63"],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\stores\\Stores.tsx",["64","65","66","67"],"import {\r\n    action, configure, decorate, observable,\r\n} from 'mobx';\r\nimport generalStore from \"./generalStore\";\r\nimport {create} from \"mobx-persist\";\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nconst hydrate = create({storage:localStorage,jsonify:true});\r\n\r\nexport class RootStore {\r\n    generalStore: generalStore;\r\n\r\n    constructor() {\r\n        this.generalStore = new generalStore(this);\r\n    }\r\n\r\n}\r\n\r\nexport const rootStore = new RootStore();\r\n",["68","69"],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\stores\\generalStore.ts",["70"],"import { action, observable } from 'mobx';\r\nimport { rootStore } from './Stores';\r\nimport cookie from 'js-cookie';\r\n\r\n\r\nexport default class GeneralStore {\r\n    rootStore: any;\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable username = 'User'\r\n    @observable data = typeof cookie.get('data')!==\"undefined\"?JSON.parse(cookie.get('data')):[];\r\n    @observable nextGoal = typeof cookie.get('nextGoal')!==\"undefined\"?JSON.parse(cookie.get('nextGoal')):{};\r\n    @observable nextGoalInt = typeof cookie.get('next')!==\"undefined\"?JSON.parse(cookie.get('next')):{};\r\n\r\n    @action.bound setUsername(username){\r\n        this.username = username\r\n    }\r\n    @action.bound setData(data){\r\n        this.data = data\r\n    }\r\n    @action.bound setNextGoal(data){\r\n        this.nextGoal = data\r\n    }\r\n    @action.bound setNextGoalInt(data){\r\n        this.nextGoalInt = data\r\n    }\r\n\r\n\r\n\r\n}\r\n","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\StrongSurvey.tsx",["71","72","73","74","75","76"],"import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport LineGraph from \"./graph/daily.js\";\r\nimport cookie from 'js-cookie';\r\n\r\n\r\nimport {toJS} from \"mobx\";\r\nimport moment from \"moment\";\r\nimport {rootStore} from \"../stores/Stores\";\r\n\r\nexport interface IHeaderState {\r\n    squat:any;\r\n    bench:any;\r\n    deadlift:any;\r\n    submitted:any;\r\n    activeQuestion:any;\r\n    reps:any;\r\n    benchReps:any;\r\n    squatReps:any;\r\n    deadliftReps:any;\r\n    loggingMax:any;\r\n    showGraph:any,\r\n}\r\ninterface IHeaderProps {\r\n    generalStore:any;\r\n    toggleGraph:any;\r\n\r\n}\r\n\r\n\r\nclass StrongSurvey extends React.Component<IHeaderProps, IHeaderState> {\r\n    constructor(props: IHeaderProps, state:IHeaderState) {\r\n        super(props);\r\n        this.state = { showGraph:false,reps:0,activeQuestion:'squat',squat:'',bench:'',deadlift:'',submitted:rootStore.generalStore.data.length>=1,\r\n            loggingMax:rootStore.generalStore.data.length<1,\r\n        squatReps:rootStore.generalStore.data.length>=1?0:1,deadliftReps:rootStore.generalStore.data.length>=1?0:1,benchReps:rootStore.generalStore.data.length>=1?0:1,};\r\n    }\r\n    calculateNextGoal(lift,reps) {\r\n        if (reps < 2) {\r\n            return `${lift} x 1+`\r\n        }\r\n        if(reps >=2 && reps <4){\r\n            return `${lift+2.5} x 1+`\r\n        }\r\n        if(reps >=4 && reps <=5){\r\n            return `${lift+3} x 1+`\r\n        }\r\n        if(reps>5){\r\n            return `${lift+6.8} x 1+`\r\n        }\r\n\r\n    }\r\n    calculateNextGoalInt(lift,reps) {\r\n        if (reps < 2) {\r\n            return lift\r\n        }\r\n        if(reps >=2 && reps <4){\r\n            return lift+2.5\r\n        }\r\n        if(reps >=4 && reps <=5){\r\n            return lift+3\r\n        }\r\n        if(reps>5){\r\n            return lift+6.8\r\n        }\r\n\r\n    }\r\n\r\n    handleSurveyChangeReps(e,type){\r\n        if(type==='squat'){\r\n            this.setState({\r\n                reps:e.target.value,\r\n                squatReps:e.target.value\r\n            });\r\n        }\r\n        if(type==='bench'){\r\n            this.setState({\r\n                reps:e.target.value,\r\n                benchReps:e.target.value\r\n            });\r\n        }\r\n        if(type==='deadlift'){\r\n            this.setState({\r\n                reps:e.target.value,\r\n                deadliftReps:e.target.value\r\n            });\r\n        }\r\n\r\n    }\r\n    handleSurveyChangeBench(e){\r\n        this.setState({\r\n            bench:e.target.value\r\n        });\r\n    }\r\n    handleSurveyChangeSquat(e){\r\n        this.setState({\r\n            squat:e.target.value\r\n        });\r\n    }\r\n    handleSurveyChangeDeadlift(e){\r\n        this.setState({\r\n            deadlift:e.target.value\r\n        });\r\n    }\r\n/*    submitDataToCookies(data){\r\n        const prevData = cookie.get('data')\r\n        console.log('prevData',typeof prevData,prevData,data);\r\n        const newData={data:{squat:parseInt(data.squat),deadlift:parseInt(data.deadlift),bench:parseInt(data.bench)},timestamp:moment().format('LL')};\r\n        if(typeof prevData !== 'undefined'){\r\n            const prevDataSet = JSON.parse(prevData)\r\n            prevDataSet.push(newData);\r\n            console.log('_______',prevDataSet);\r\n            rootStore.generalStore.setData(prevDataSet);\r\n            cookie.set('data',prevDataSet);\r\n\r\n        }\r\n        else{\r\n            cookie.set('data',[newData]);\r\n            rootStore.generalStore.setData([newData]);\r\n        }\r\n\r\n    }*/\r\n    submitDataToCookies(data){\r\n        const nextSquatGoal = this.calculateNextGoal(parseFloat(this.state.squat),this.state.squatReps);\r\n        const nextBenchGoal = this.calculateNextGoal(parseFloat(this.state.bench),this.state.benchReps);\r\n        const nextDeadliftGoal = this.calculateNextGoal(parseFloat(this.state.deadlift),this.state.deadliftReps);\r\n        const nextSquatGoalInt = this.calculateNextGoalInt(parseFloat(this.state.squat),this.state.squatReps);\r\n        const nextBenchGoalInt = this.calculateNextGoalInt(parseFloat(this.state.bench),this.state.benchReps);\r\n        const nextDeadliftGoalInt = this.calculateNextGoalInt(parseFloat(this.state.deadlift),this.state.deadliftReps);\r\n        const nextGoal = {squat:nextSquatGoal,deadlift:nextDeadliftGoal,bench:nextBenchGoal};\r\n        const nextGoalInt = {squat:nextSquatGoalInt,deadlift:nextDeadliftGoalInt,bench:nextBenchGoalInt};\r\n        cookie.set('nextGoal',nextGoal);\r\n        const prevData = cookie.get('data')\r\n        console.log('prevData',typeof prevData,prevData,data);\r\n        if(typeof prevData !== 'undefined'){\r\n            const prevDataSet = JSON.parse(prevData)\r\n            const addDay = prevDataSet.length\r\n            prevDataSet.push({data:{squat:data.squat,squatReps:data.squatReps,deadlift:data.deadlift,deadliftReps:data.deadliftReps,bench:data.bench,benchReps:data.benchReps},timestamp:moment().format('LL')});\r\n            rootStore.generalStore.setData(prevDataSet);\r\n            rootStore.generalStore.setNextGoal(nextGoal);\r\n            rootStore.generalStore.setNextGoalInt(nextGoalInt);\r\n            cookie.set('next',nextGoalInt);\r\n            cookie.set('data',prevDataSet);\r\n        }\r\n        else{\r\n            cookie.set('data',[{data:data,timestamp:moment().format('LL')}]);\r\n            cookie.set('next',nextGoalInt);\r\n            rootStore.generalStore.setData([{data:data,timestamp:moment().format('LL')}]);\r\n            rootStore.generalStore.setNextGoal(nextGoal);\r\n            rootStore.generalStore.setNextGoalInt(nextGoalInt);\r\n            this.setState({submitted:true})\r\n        }\r\n\r\n    }\r\n    removeData(){\r\n        cookie.remove('data')\r\n        cookie.remove('nextGoal')\r\n        cookie.remove('next')\r\n        window.location.reload();\r\n    }\r\n\r\n    renderActiveQuestion(){\r\n        switch(this.state.activeQuestion) {\r\n            case 'squat':\r\n                return <div className=\"fadedshort\" style={{width: '100%', display: 'block', marginTop: 50}}>\r\n                    <input\r\n                    autoFocus={true}\r\n                    max={400}\r\n                    min={0}\r\n                    style={{display: 'inline-block',width:200}}\r\n                    type=\"number\"\r\n                    name=\"squat\"\r\n                    value={this.state.squat}\r\n                    placeholder=\"Squat\"\r\n                    className=\"signup-form\"\r\n                    onChange={(e) => {\r\n                        this.handleSurveyChangeSquat(e)\r\n                    }}\r\n                    onKeyPress={(event) => {\r\n                        if (event.key === 'Enter') {\r\n                            if(this.state.squatReps){\r\n                                this.setState({activeQuestion: 'bench',reps:0})\r\n                            }\r\n\r\n                        }\r\n                    }}\r\n                />\r\n                    <input\r\n                        max={400}\r\n                        min={0}\r\n                        style={{display: 'inline-block',width:80}}\r\n                        type=\"number\"\r\n                        name=\"reps\"\r\n                        disabled={this.state.loggingMax&&this.state.squatReps}\r\n                        value={this.state.reps||this.state.squatReps}\r\n                        placeholder=\"x reps\"\r\n                        className=\"signup-form\"\r\n                        onChange={(e) => {\r\n                            this.handleSurveyChangeReps(e,'squat')\r\n                        }}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                // @ts-ignore\r\n                                document.activeElement.blur()\r\n                                this.setState({activeQuestion: 'bench',reps:0})\r\n\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n\r\n                </div>;\r\n            case 'bench':\r\n                return(<div style={{width: '100%', display: 'block', marginTop: 50}}>\r\n                    <input\r\n                        autoFocus={true}\r\n                        max={400}\r\n                        min={0}\r\n                        style={{display: 'inline-block',width:200}}\r\n                        type=\"number\"\r\n                        name=\"bench\"\r\n                        value={this.state.bench}\r\n\r\n                        placeholder=\"Bench\"\r\n                        className=\"signup-form fadedshort\"\r\n                        onChange={(e) => {\r\n                            this.handleSurveyChangeBench(e)\r\n                        }}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter') {\r\n\r\n                                if(this.state.benchReps){\r\n                                    this.setState({activeQuestion: 'deadlift',reps:0})\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                    <input\r\n                        max={400}\r\n                        min={0}\r\n                        style={{display: 'inline-block',width:80}}\r\n                        type=\"number\"\r\n                        name=\"reps\"\r\n                        disabled={this.state.loggingMax&&this.state.benchReps}\r\n                        value={this.state.reps||this.state.benchReps}\r\n                        placeholder=\"x reps\"\r\n                        className=\"signup-form fadedshort\"\r\n                        onChange={(e) => {\r\n                            this.handleSurveyChangeReps(e,'bench')\r\n                        }}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                this.setState({activeQuestion: 'deadlift',reps:0})\r\n                                // @ts-ignore\r\n                                document.activeElement.blur()\r\n\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                </div>);\r\n            case 'deadlift':\r\n                return(<div className=\"fadedshort\"  style={{width: '100%', display: 'block', marginTop: 50}}>\r\n                    <input\r\n                        autoFocus={true}\r\n                        max={400}\r\n                        min={0}\r\n                        style={{display: 'inline-block',width:200}}\r\n                        type=\"number\"\r\n                        name=\"deadlift\"\r\n                        value={this.state.deadlift}\r\n                        placeholder=\"Deadlift\"\r\n                        className=\"signup-form fadedshort\"\r\n                        onChange={(e) => {\r\n                            this.handleSurveyChangeDeadlift(e)\r\n                        }}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                if(this.state.deadliftReps){\r\n                                    this.setState({activeQuestion: null,reps:0})\r\n                                    this.submitDataToCookies(this.state)\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                    <input\r\n                        max={400}\r\n                        min={0}\r\n                        style={{display: 'inline-block',width:80}}\r\n                        type=\"number\"\r\n                        name=\"reps\"\r\n                        disabled={this.state.loggingMax&&this.state.deadliftReps}\r\n                        value={this.state.reps||this.state.deadliftReps}\r\n                        placeholder=\"x reps\"\r\n                        className=\"signup-form fadedshort\"\r\n                        onChange={(e) => {\r\n                            this.handleSurveyChangeReps(e,'deadlift')\r\n                        }}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                this.setState({activeQuestion: null,reps:0})\r\n                                this.submitDataToCookies(this.state)\r\n\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                </div>);\r\n            default:\r\n                if(this.state.squatReps==1&&this.state.benchReps==1&&this.state.deadliftReps==1){\r\n                    (<div className=\"fadedshort\" ><h3>Your one rep max has been logged. Please use the below training max</h3>\r\n                        <br/>\r\n                        <div className=\"fadedshort\">\r\n                            {this.state.squat&&<>Squat: {this.state.squat}</>}\r\n                            <br />\r\n                            {this.state.squat&&<>Training Max: {Math.ceil(0.9*this.state.squat)}</>}\r\n<br />\r\n\r\n                            {this.state.bench&&<>Bench: {this.state.bench}</>}\r\n                            <br />\r\n                            {this.state.bench&&<>Training Max: {Math.ceil(0.9*this.state.bench)}</>}\r\n                            <br />\r\n                            {this.state.deadlift&&<>Deadlift: {this.state.deadlift}</>}\r\n                            <br />\r\n                            {this.state.deadlift&&<>Training Max: {Math.ceil(0.9*this.state.deadlift)}</>}\r\n                            <br />\r\n\r\n                        </div></div>)\r\n                }\r\n                return(<div className=\"fadedshort\" ><h3 style={{color:'pink'}}>Your work has been logged. Thank you.</h3>\r\n                <br/></div>)\r\n\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        console.log(rootStore.generalStore.data)\r\n        return (<div style={{height:'100%',width:'25%',backgroundColor:\"transparent\"}} className=\"fadedshort\">\r\n                <div style={{display:'flex'}}>\r\n                    <div style={{width:400,margin:0,height:550,backgroundColor:'#f7e1c7',borderRadius:12,marginBottom:50,border:'2px solid #fff'}}>\r\n                        <p style={{height:40,color:'#fff'}}>{this.state.submitted?`Log today's training session`:`Submit Your One Rep Max`}</p>\r\n                        {rootStore.generalStore.nextGoal.squat?<div style={{color:'white'}}>\r\n                            <h3 style={{color:'white',margin:0}}>{rootStore.generalStore.data.length===1?'Your programme has been generated below':'Try for these numbers next week'}</h3>\r\n                            <p><b>S</b>{rootStore.generalStore.nextGoal.squat}  <b style={{marginLeft:10}}>B</b>{rootStore.generalStore.nextGoal.bench} <b style={{marginLeft:10}}>D</b>{rootStore.generalStore.nextGoal.deadlift}</p>\r\n                            </div>:null}\r\n\r\n                        <div className=\"scrollbar\" style={{maxHeight:90,overflowY:'auto',overflowX:'hidden',maxWidth:399}}>{rootStore.generalStore.data.length>=1?<div>{rootStore.generalStore.data.map((data)=>{\r\n                            console.log('...',data);\r\n                            return(<div style={{borderBottom:'1px solid #f5f4fa',backgroundColor:'pink',color:'white',maxWidth:399,width:399,overflowX:'hidden',display:'flex',justifyContent:'space-evenly'}}><div>{data.timestamp}</div><div style={{marginLeft:20,width:40}}>S{data.data.squat} x{data.data.squatReps}</div><div style={{marginLeft:20,width:40}}>B{data.data.bench} x{data.data.benchReps}</div><div style={{marginLeft:20,width:40}}>D{data.data.deadlift} x{data.data.deadliftReps}</div>\r\n                            </div>)\r\n                        })}\r\n                            <div style={{marginTop:10,display:'flex',justifyContent:'center',height:30}}> <div style={{width:'95%',backgroundColor:'#fff',border:'2px solid #f5f4fa',color:'#fae0e2',cursor:'pointer',borderRadius:8,height:22,fontSize:18}} onClick={()=>{this.removeData()}}>Clear All Logs</div></div>\r\n\r\n                        </div>:null}\r\n                        </div>\r\n                        <br />\r\n                        {this.renderActiveQuestion()}\r\n                        <div style={{marginTop:10,display:'flex',justifyContent:'center',height:30}}> <div style={{width:'95%',backgroundColor:'#fff',border:'2px solid #f5f4fa',color:'#fae0e2',cursor:'pointer',borderRadius:8,height:22,fontSize:18}} onClick={()=>{this.props.toggleGraph()}}>Toggle Progress Graph</div></div>\r\n\r\n\r\n\r\n                    </div>\r\n                    <br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst ObservedStrongSurvey = observer(StrongSurvey);\r\nexport default ObservedStrongSurvey;\r\n","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\daily.js",["77","78","79","80","81","82","83","84","85","86","87","88"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport moment from \"moment\";\r\nimport {\r\n    Button, MenuItem, Position, Classes, Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { MultiSelect, Select } from \"@blueprintjs/select\";\r\nimport { DateTime } from \"luxon\";\r\nimport Spinner from \"./spinner\";\r\nimport ChartWrapper from \"./chartwrapper\";\r\nimport Search from \"./search\";\r\n\r\nclass Daily extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartHandle = this.chartHandle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // fetch data\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n            selectedLegend: [],\r\n            selectedOrganizations: [],\r\n            dataItems: [],\r\n            updated: false,\r\n            legendItems: [{\r\n                datasetIndex: 0,\r\n                fillStyle: \"#b16037\",\r\n                hidden: false,\r\n                lineCap: \"\",\r\n                lineDash: \"\",\r\n                lineDashOffset: \"\",\r\n                lineJoin: \"\",\r\n                lineWidth: 1,\r\n                pointStyle: \"\",\r\n                strokeStyle: \"#b16037\",\r\n                text: \"Organization1 Score3\",\r\n            }],\r\n        });\r\n    }\r\n\r\n    chartHandle(chart) {\r\n        const chartInstanceHandle = chart;\r\n        this.setState({\r\n            chartInstance: chartInstanceHandle,\r\n            legendItems: chartInstanceHandle.legend.legendItems,\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        const submitted=this.props.submitted\r\n        /* const clearButton =\r\n            this.state.selectedLegend.length > 0 ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;*/\r\n        const shortTermChartColorStorage = [\r\n            \"#efd8ff\",\r\n        ];\r\n        if(true) {\r\n            const randHex = Math.floor(Math.random() * 16777215);\r\n            const color = `#${randHex.toString(16)}`;\r\n            const color2 = `#${Math.floor(randHex - 5000).toString(16)}`;\r\n            const color3 = `#${Math.floor(randHex - 8000).toString(16)}`;\r\n            const squatData= this.props.dataset.map((data)=>{return({x:data.timestamp,y:data.data.squat})});\r\n            const benchData= this.props.dataset.map((data)=>{return({x:data.timestamp,y:data.data.bench})});\r\n            const deadliftData= this.props.dataset.map((data)=>{return({x:data.timestamp,y:data.data.deadlift})});\r\n            const testData = this.props.dataset;\r\n            console.log('WHAT IS MY TEST DATA',testData,squatData,benchData,deadliftData);\r\n\r\n            const dataset2 = [\r\n                        {\r\n                            label: `Squat`,\r\n                            backgroundColor: color,\r\n                            borderColor: color,\r\n                            borderWidth: 1,\r\n                            hoverBackgroundColor: color,\r\n                            hoverBorderColor: color,\r\n                            fill: false,\r\n                            showLine: true,\r\n                            hidden: false,\r\n                            data:squatData\r\n                        },\r\n                        {\r\n                            label: `Bench`,\r\n                            backgroundColor: color2,\r\n                            borderColor: color2,\r\n                            borderWidth: 1,\r\n                            hoverBackgroundColor: color2,\r\n                            hoverBorderColor: color2,\r\n                            fill: false,\r\n                            showLine: true,\r\n                            hidden: false,\r\n                            data:benchData\r\n                        },\r\n                        {\r\n                            label: `Deadlift`,\r\n                            backgroundColor: color3,\r\n                            borderColor: color3,\r\n                            borderWidth: 1,\r\n                            hoverBackgroundColor: color3,\r\n                            hoverBorderColor: color3,\r\n                            fill: false,\r\n                            showLine: true,\r\n                            hidden: false,\r\n                            data:deadliftData\r\n                        }];\r\n            const chartConfig = {\r\n                labels: this.props.dataset.length>=1?[moment(this.props.dataset[0].timestamp).toISOString(),moment(this.props.dataset[this.props.dataset.length-1].timestamp).toISOString()]:[new Date().toISOString(),moment().add('30','day').toISOString()],\r\n                datasets: dataset2,\r\n            };\r\n\r\n            return (\r\n                <section style={{width:800,height:800}}>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"container\">\r\n                            <div style={{ margin: 15 }}>\r\n                                <ChartWrapper\r\n                                    chartHandle={this.chartHandle}\r\n                                    type=\"line\"\r\n                                    data={chartConfig}\r\n                                    options={{\r\n                                        animationTime: 0,\r\n                                        hoverMode: \"index\",\r\n                                        stacked: false,\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: \"bottom\",\r\n                                            /* labels: {\r\n                                                filter(item, chart) {\r\n                                                    // Logic to remove a particular legend item goes here\r\n                                                    return item.text.includes('TEST 2 Score1');\r\n                                                },\r\n                                            },*/\r\n                                        },\r\n                                        annotation: {\r\n                                            annotations: [\r\n\r\n                                            ],\r\n                                        },\r\n\r\n                                        tooltips: {\r\n                                            mode: \"nearest\",\r\n                                            intersect: true,\r\n                                            enabled: true,\r\n                                            callbacks: {\r\n                                                label(tooltipItems, data) {\r\n                                                    const averageDataSetIndex = tooltipItems.datasetIndex;\r\n                                                    console.log(data,tooltipItems);\r\n                                                    return `${data.datasets[tooltipItems.datasetIndex].label}: ${tooltipItems.yLabel} kg/lb `;\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                        scales: {\r\n\r\n                                            xAxes: [{\r\n                                                type: \"time\",\r\n                                                time: {\r\n                                                    unit: \"day\",\r\n                                                    displayFormats: {\r\n                                                        day: \"MMM D\",\r\n                                                    },\r\n                                                    tooltipFormat: \"MMM D\",\r\n                                                    display: true,\r\n                                                    ticks: {\r\n                                                        display: true,\r\n                                                        source: \"labels\",\r\n                                                    },\r\n                                                    scaleLabel: {\r\n                                                        display: true,\r\n                                                    },\r\n\r\n                                                },\r\n                                            }],\r\n                                            yAxes: [{\r\n                                                ticks: {\r\n                                                    stepSize: 1,\r\n                                                },\r\n                                                scaleLabel: {\r\n                                                    display: true,\r\n                                                    labelString: \"KG/LB\",\r\n                                                },\r\n                                            }],\r\n                                        },\r\n                                    }\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </section>\r\n            );\r\n        }\r\n        return (\r\n            <div style={{ marginTop: 30 }}>\r\n                <Spinner\r\n                    animated\r\n                    content={[\"Extracting information...\",\r\n                        \"Generating Chart...\", \"Aquiring Birthdays...\", \"Integrating Data Structures...\",\r\n                        \"Taking Temperatures...\", \"Inheriting Schematics...\", \"Rolling up data source...\", \"Drilling down...\"]\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDaily.propTypes = {};\r\nDaily.contextTypes = {\r\n    router: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default (Daily);","C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\chartwrapper.js",[],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\Spinner.js",[],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\search.js",[],"C:\\Users\\Alex\\WebstormProjects\\strfactory\\src\\components\\graph\\spinner.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":1,"column":8,"nodeType":"95","messageId":"96","endLine":1,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":8,"column":3,"nodeType":"99","messageId":"100","endLine":10,"endColumn":4},{"ruleId":"101","severity":1,"message":"102","line":5,"column":9,"nodeType":"95","messageId":"96","endLine":5,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":47,"column":71,"nodeType":"105","endLine":47,"endColumn":124},{"ruleId":"103","severity":1,"message":"104","line":61,"column":26,"nodeType":"105","endLine":61,"endColumn":54},{"ruleId":"101","severity":1,"message":"106","line":2,"column":5,"nodeType":"95","messageId":"96","endLine":2,"endColumn":11},{"ruleId":"101","severity":1,"message":"107","line":2,"column":24,"nodeType":"95","messageId":"96","endLine":2,"endColumn":32},{"ruleId":"101","severity":1,"message":"108","line":2,"column":34,"nodeType":"95","messageId":"96","endLine":2,"endColumn":44},{"ruleId":"101","severity":1,"message":"109","line":8,"column":7,"nodeType":"95","messageId":"96","endLine":8,"endColumn":14},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"101","severity":1,"message":"110","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":19},{"ruleId":"101","severity":1,"message":"111","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":7,"column":9,"nodeType":"95","messageId":"96","endLine":7,"endColumn":13},{"ruleId":"101","severity":1,"message":"112","line":137,"column":19,"nodeType":"95","messageId":"96","endLine":137,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":310,"column":40,"nodeType":"115","messageId":"116","endLine":310,"endColumn":42},{"ruleId":"113","severity":1,"message":"114","line":310,"column":65,"nodeType":"115","messageId":"116","endLine":310,"endColumn":67},{"ruleId":"113","severity":1,"message":"114","line":310,"column":93,"nodeType":"115","messageId":"116","endLine":310,"endColumn":95},{"ruleId":"93","severity":1,"message":"117","line":6,"column":5,"nodeType":"95","messageId":"96","endLine":6,"endColumn":11},{"ruleId":"93","severity":1,"message":"118","line":6,"column":13,"nodeType":"95","messageId":"96","endLine":6,"endColumn":21},{"ruleId":"93","severity":1,"message":"119","line":6,"column":23,"nodeType":"95","messageId":"96","endLine":6,"endColumn":31},{"ruleId":"93","severity":1,"message":"120","line":6,"column":33,"nodeType":"95","messageId":"96","endLine":6,"endColumn":40},{"ruleId":"93","severity":1,"message":"121","line":6,"column":42,"nodeType":"95","messageId":"96","endLine":6,"endColumn":48},{"ruleId":"93","severity":1,"message":"122","line":8,"column":10,"nodeType":"95","messageId":"96","endLine":8,"endColumn":21},{"ruleId":"93","severity":1,"message":"123","line":8,"column":23,"nodeType":"95","messageId":"96","endLine":8,"endColumn":29},{"ruleId":"93","severity":1,"message":"124","line":9,"column":10,"nodeType":"95","messageId":"96","endLine":9,"endColumn":18},{"ruleId":"93","severity":1,"message":"125","line":12,"column":8,"nodeType":"95","messageId":"96","endLine":12,"endColumn":14},{"ruleId":"93","severity":1,"message":"126","line":57,"column":15,"nodeType":"95","messageId":"96","endLine":57,"endColumn":24},{"ruleId":"93","severity":1,"message":"127","line":60,"column":15,"nodeType":"95","messageId":"96","endLine":60,"endColumn":41},{"ruleId":"93","severity":1,"message":"128","line":151,"column":59,"nodeType":"95","messageId":"96","endLine":151,"endColumn":78},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'toJS' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'action' is defined but never used.","'decorate' is defined but never used.","'observable' is defined but never used.","'hydrate' is assigned a value but never used.","'rootStore' is defined but never used.","'LineGraph' is defined but never used.","'addDay' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'MenuItem' is defined but never used.","'Position' is defined but never used.","'Classes' is defined but never used.","'Intent' is defined but never used.","'MultiSelect' is defined but never used.","'Select' is defined but never used.","'DateTime' is defined but never used.","'Search' is defined but never used.","'submitted' is assigned a value but never used.","'shortTermChartColorStorage' is assigned a value but never used.","'averageDataSetIndex' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]